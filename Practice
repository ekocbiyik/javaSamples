import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.*;
import java.util.regex.Pattern;
import java.util.stream.Collectors;

/**
 * ekocbiyik on 12.03.2020
 */
public class Practice {

    public static void main(String[] args) throws IOException {
        Section1.execute();
        Section2.execute();
        Section3.execute();
    }
}

class Section1 {

    public static void execute() {
        System.out.println(
                findMissing(
                        Arrays.asList(4, 12, 9, 5, 6, 1),
                        Arrays.asList(4, 9, 12, 6)
                )
        );
    }

    private static List<Integer> findMissing(List<Integer> array1, List<Integer> array2) {
        Set<Integer> firstArray = new HashSet<>(array1);
        firstArray.removeAll(new HashSet<>(array2));
        return new ArrayList<>(firstArray);
    }
}

class Section2 {

    public static void execute() {
        System.out.println(
                rotate(
                        Arrays.asList(1, 2, 3, 4, 5, 6),
                        6
                )
        );
    }

    private static List<Integer> rotate(List<Integer> itemList, Integer item) {

        int pivot = itemList.indexOf(item);
        List<Integer> left = itemList.subList(0, pivot + 1);
        List<Integer> right = itemList.subList(pivot + 1, itemList.size());

        List<Integer> result = new ArrayList<>();
        result.addAll(right);
        result.addAll(left);
        return result;
    }
}

class Section3 {

    public static void execute() throws IOException {

        String inputFile = "/tmp/input_file.txt";
//        generateTestFile(inputFile);  // todo: generate test file if needed

        List<String> lines = loadTestFile(inputFile);   // load test files
        List<List<String>> accountGroups = parseLines(lines);   // all lines grouped by account
        List<Map<String, Integer>> calculatedAccounts = validateAndCalculateAccounts(accountGroups);// ignore invalid lines & calculate rate

        printResults(calculatedAccounts);
    }

    private static void generateTestFile(String inputFile) throws IOException {

        new File(inputFile).delete();               // delete if exist!

        List<String> lines = Arrays.asList(
                "3",                                // t [the number of tests <= 5]
                "6",                                // n [the number of accounts<= 100 000]
                "03 10103538 2222 1233 6160 0142",  // [list of accounts]
                "03 10103538 2222 1233 6160 0141",
                "30 10103538 2222 1233 6160 0141",
                "30 10103538 2222 1233 6160 0142",
                "30 10103538 2222 1233 6160 0141",
                "30 10103538 2222 1233 6160 0142",
                "",                                 // [empty line]
                "5",                                // n [the number of accounts<= 100 000]
                "30 10103538 2222 1233 6160 0144",  // [list of accounts]
                "30 10103538 2222 1233 6160 0142",
                "30 10103538 2222 1233 6160 0145",
                "30 10103538 2222 1233 6160 0146",
                "30 10103538 2222 1233 6160 0143",
                "",
                "3",
                "30 10103538 2222 1233 6160 0145",
                "30 10103538 2222 1233 6160 0146",
                "30 10103538 2222 1233 6160 0143",
                ""
        );

        FileWriter writer = new FileWriter(inputFile);
        for (String str : lines) {
            writer.write(str + System.lineSeparator());
        }
        writer.close();
    }

    private static List<String> loadTestFile(String inputFile) throws IOException {
        return Files.lines(Paths.get(inputFile)).collect(Collectors.toList());
    }

    private static List<List<String>> parseLines(List<String> lines) {

        int numberOfTests = Integer.parseInt(lines.get(0));
        int numberOfAccounts = 0;

        List<List<String>> accountGroups = new ArrayList<>();
        List<String> tmpAccountList = new ArrayList<>();

        for (int i = 1; i < lines.size(); i++) {

            if (lines.get(i).isEmpty()) {           // every empty line is end of the account numbers
                accountGroups.add(new ArrayList<>(tmpAccountList));
                tmpAccountList.clear();
                numberOfTests--;
                continue;
            }

            if (numberOfTests <= 0) {   // iterate until number of test count
                break;
            }

            if (lines.get(i).length() == 1) {   // 1 digit line meaning is number of accounts size
                numberOfAccounts = Integer.parseInt(lines.get(i));
                continue;
            }

            if (numberOfAccounts <= 0) {    // continue to add until number of account size
                continue;
            }

            tmpAccountList.add(lines.get(i));
            numberOfAccounts--;
        }

        return accountGroups;
    }

    private static List<Map<String, Integer>> validateAndCalculateAccounts(List<List<String>> accountGroups) {

        List<Map<String, Integer>> resultList = new ArrayList<>();

        accountGroups.forEach(accountList -> {
            TreeMap<String, Integer> calculatedList = new TreeMap<>();  // <account number, count> (group by account number)
            accountList.forEach(account -> {
                if (isValid(account)) {
                    int count = calculatedList.get(account) == null ? 0 : calculatedList.get(account);
                    calculatedList.put(account, ++count);
                }   // ignore invalid account numbers
            });
            resultList.add(calculatedList);
        });

        return resultList; // sorted ASC by default
    }

    private static boolean isValid(String account) {
        return Pattern.matches("([0-9]{2}) ([0-9]{8}) ([0-9]{4}) ([0-9]{4}) ([0-9]{4}) ([0-9]{4})", account);
    }

    private static void printResults(List<Map<String, Integer>> calculatedAccounts) {
        calculatedAccounts.forEach(list -> {
            list.entrySet().forEach(item -> System.out.println(item.getKey() + " " + item.getValue()));
            System.out.println(" ");
        });
    }

}
